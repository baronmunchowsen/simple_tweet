<?php
// $Id$

 
/**
 * Define Module Constants
 */ 

define('SIMPLE_TWEET_PAGE', variable_get('simple_tweet_tweets_path', ''));
define('SIMPLE_TWEET_PAGENAME', variable_get('simple_tweet_page_title', 'Our Tweets From Twitter'));

/**
 * Implementation of hook_menu()
 */

function simple_tweet_menu() {
  $items = array();

  $items['admin/settings/simple-tweet'] = array(
    'title' => t('Simple Tweet Settings'),
    'access arguments' => array('administer simple tweet'),
    'description' => t('Simple Tweet Settings and Configuration Page'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('simple_tweet_admin_settings'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'simple_tweet.admin.inc',
  );

  $items[SIMPLE_TWEET_PAGE] = array(
    'title' => SIMPLE_TWEET_PAGENAME,
    'access arguments' => array('see tweets'),
    'description' => t('List of recent Tweets from Twitter'),
    'page callback' => 'simple_tweet_show_tweets',
  );

  return $items;
}

/**
 * Implementation of hook_perm
 */

function simple_tweet_perm() {
  return array('administer simple tweet', 'see tweets');
}

/**
 * Implementation of hook_block
 * This has 2 different blocks. One for only one tweet
 * and one for multiple tweets.
 */

function simple_tweet_block($op = 'list', $delta = 0, $edit = array()) {
  switch ($op) {
    //list
    case 'list': 
      $blocks[0] = array(
      'info' => t('Latest Tweets - Multiple Tweets Block'),
      'status' => FALSE,
      );
      $blocks[1] = array(
      'info' => t('Latest Tweet - Single Tweet Block'),
      'status' => FALSE,
      );
      return $blocks;
    break;

    //configure
    case 'configure':
      return $form;
    break;

    //view & default
    case 'view': default:
      switch ($delta) {
        case 0:
          $block['subject'] = t('Latest Tweets');
          // get tweets
          $twitters = _simple_tweet_get_twitters();
          // get number of tweets to display
          $num = variable_get('simple_tweet_block_number', "1");
          // remove surplus tweets (done here rather than in theme function)
          foreach($twitters as $id => $tweet) { if($id >= $num) { unset($twitters[$id]); } }
          $block['content'] = theme('simple_tweet_list', $twitters);
        break;
        case 1:
          $block['subject'] = t('Latest Tweet');
          // get tweets
          $twitters = _simple_tweet_get_twitters();
          // for single tweet block, we just want the first tweet in an array
          $twitters = array($twitters[0]);
          $block['content'] = theme('simple_tweet_list', $twitters, 1);
        break;
    } //end switch
  return $block;
  }
}

/**
 * Callback Functions
 */

function simple_tweet_show_tweets() {
  $twitters = _simple_tweet_get_twitters();
  return theme('simple_tweet_list', $twitters, NULL);
}

/**
 * Implementation of hook_theme
 *
 * @return array of theme functions
 */

function simple_tweet_theme() {
  return array(
    'simple_tweet_list' => array('arguments' => array('twitters' => NULL, 'number' => NULL)),
    'simple_tweet_tweet' => array('arguments' => array('tweet' => NULL)),
  );
}

/**
 * theme_simple_tweet_list - format a list of tweets
 *
 * @param object $twitters
 * @param int $number
 * @return string
 */

function theme_simple_tweet_list($twitters, $number = NULL) {
  $op = '';
  //if number of tweets is not 1
  if ($number != '1') {
    $op .= '<div class="simple-tweet-timeline">';
  }
  
  foreach($twitters as $tweet) {
    $op .= theme('simple_tweet_tweet', $tweet);
  }
  
  //closing div
  if ($number != '1') { 
    $op .= '</div>';
  }
  
  return $op;
}

/**
 * theme_simple_tweet_tweet - format an individual tweet
 *
 * @param object $twit
 * @return string
 */

function theme_simple_tweet_tweet($tweet) {
  $op = '<div class="simple-tweet">';
  $op .= '<div class="simple-tweet-created">'. $tweet['date'] .'</div>';
  $op .= '<div class="simple-tweet-msg">'. $tweet['text'] .'</div>'; 
  $op .= '</div>';
  return $op;
}

/**
 *
 */

function _simple_tweet_get_twitters() {
  $time_now = time();
  $time_plus_fifteen = $time_now + (60*15);
  
  //is there a valid cached version
  
  //manually check expiry time as drupal automatic expiry requires cron, which
  //may not be installed or set to run as often as every 15 minutes.
  $sql = "SELECT expire FROM {cache} WHERE cid = 'simple_tweet'";
  $expire_time = db_result(db_query($sql));
  if($expire_time > $time_now) { //if expiry time is still after (later than) current time
    $tweets = cache_get('simple_tweet');
    $tweets = $tweets->data;
  } else { //if cache has expired, then get the latest rss and reset the cache
    $tweets = _simple_tweet_get_latest_rss();
    $set = cache_set('simple_tweet', $tweets, 'cache', $time_plus_fifteen);
  }
  return $tweets;
}

/**
 * Get the latest RSS feed and parse into a simpleXML element
 */

function _simple_tweet_get_latest_rss() {  
  //get rss url
  $rss_url = variable_get('simple_tweet_rss_url', '');
  if (!$rss_url) {
    watchdog('simple_tweet', t('No RSS feed found for Simple Tweet Module.'));
    return false;
  }
  if (!preg_match('/^http?:\/\/.+/', $rss_url)) { 
    watchdog('simple_tweet', t('Issue with RSS feed for Simple Tweet Module - could not retrieve tweets.'));
    return false;
  }
  //retrieve from twitter  
  $twitter_xml = file_get_contents($rss_url);
  if(simplexml_load_string($twitter_xml)){
    $twitters = simplexml_load_string($twitter_xml);
    //return tweets
    $twitters = _simple_tweet_clean_simplexml($twitters);
    return $twitters;
  } else {
    watchdog('simple_tweet', 'There is an issue with the RSS twitter Feed');
    return false;
  } 
}

function _simple_tweet_clean_simplexml($twitters) {
  if(!$twitters) { return FALSE; }
  $return = array();
  $count = count($twitters->channel->item);
  for ($i=0; $i<$count; $i++) {
    $return[$i] = array();
    
    //text of the tweet
    $text = (string) $twitters->channel->item[$i]->description;
    // 1. Strip out username and colon
    $strip = variable_get('simple_tweet_username', '') . ":";
    $text = str_replace($strip, "", $text);
    // 2. Trim the text
    $text = trim($text);
    // 3. Process links
    $text = _simple_tweet_process_links($text);
    
    $return[$i]['text'] = $text;
  
    //publish date of the tweet
    $date = strtotime((string) $twitters->channel->item[$i]->pubDate);
    $date = _simple_tweet_format_date($date);
    
    $return[$i]['date'] = $date;
    
    //link for the tweet
    
    $return[$i]['link'] = (string) $twitters->channel->item[$i]->link;
    
  }
  return $return;
}

/**
 * Process Links in Tweets
 */
function _simple_tweet_process_links($text) {
  $text = preg_replace("#(^|[\n ])([\w]+?://[\w]+[^ \"\n\r\t< ]*)#", "\\1<a href=\"\\2\" target=\"_blank\">\\2</a>", $text);
  $text = preg_replace("#(^|[\n ])((www|ftp)\.[^ \"\t\n\r< ]*)#", "\\1<a href=\"http://\\2\" target=\"_blank\">\\2</a>", $text);
  $text = preg_replace("/@(\w+)/", "<a href=\"http://www.twitter.com/\\1\" target=\"_blank\">@\\1</a>", $text);
  $text = preg_replace("/#(\w+)/", "<a href=\"http://search.twitter.com/search?q=\\1\" target=\"_blank\">#\\1</a>", $text);
  return $text;
}

/**
 * Format Dates in Tweets
 */

function _simple_tweet_format_date($date) {
   $type = variable_get('simple_tweet_dateformat', 'medium');
   $system = array('small', 'medium', 'large');
   if (!in_array($type, $system)) {
     $format = variable_get('date_format_' . $type, 'medium');
     $type = 'custom';
     return format_date($date, $type, $format);
   }
   else {
     return format_date($date, $type);
   }
}
